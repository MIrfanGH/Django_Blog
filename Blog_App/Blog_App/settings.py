"""
Django settings for Blog_App project.

Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path


import os
from dotenv import load_dotenv
load_dotenv() # Load environment variables from a .env file into the system environment



# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent



# Secret key fetched securely from environment variables
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: Set to False in production
DEBUG = os.environ.get("DEBUG")



# Hosts/domain names the app can serve; required for security and header validation
ALLOWED_HOSTS = ['127.0.0.1' ,
                 'mydailyblog-de8f0c5ea03b.herokuapp.com'
                 ]


# Application definition

INSTALLED_APPS = [

    # Local Apps
    'blog.apps.BlogConfig', # Adding app's BlogConfig(full path),  If  app has a custom configuration defined in its apps.py file
    'users.apps.UsersConfig',

    # Third-party apps
    'crispy_forms',     # For rendering Django forms with better HTML using a frontend framework
    'crispy_bootstrap5',
    'storages',


    # Default Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

# Middleware stack to handle request/response processing, sessions, security, etc.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Root URL configuration file
ROOT_URLCONF = 'Blog_App.urls'


# Template engine configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI entry point for production deployments
WSGI_APPLICATION = 'Blog_App.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration (default: SQLite)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation for enhanced security
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Media files (user-uploaded content)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  
MEDIA_URL = '/media/'  
"""
MEDIA_ROOT---> The absolute filesystem path where Django stores uploaded media files
MEDIA_URL---> The URL that handles serving the files from MEDIA_ROOT in the browser
              Used in templates for displaying uploaded content (e.g., user profile images).
"""


# Crispy Forms configuration
CRISPY_TEMPLATE_PACK = 'bootstrap5' # Specifies that Bootstrap 5 should be used for rendering forms


""" Authentication settings """

# After successful login, redirect user to this named URL
# Useful when we are using a custom LoginView instead of Djangoâ€™s default.
LOGIN_REDIRECT_URL = 'blog_home'   

# URL name where unauthenticated users are redirected to when login is required
# For example, when accessing @login_required views or when redirecting after logout
LOGIN_URL = "login"  


""" >>>>>>>>>>>>>>>>>> Email reset functionality (using built-in os module) <<<<<<<<<<<<<<<<<<<<<<< """

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Use SMTP protocol for sending emails
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server address
EMAIL_PORT = 587  # Port for TLS-encrypted SMTP communication
EMAIL_USE_TLS = True   # Enable TLS encryption for secure email transmission
EMAIL_HOST_USER = os.environ.get('USER_EMAIL')  # Sender email address fetched from environment variables
EMAIL_HOST_PASSWORD = os.environ.get('USER_EMAIL_PASSWORD')  # App-specific password or SMTP password fetched from environment variables


""" >>>>>>>>>>>>>>>>>> AWS S3 <<<<<<<<<<<<<<<<<<<<<<< """

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')   # AWS IAM user's Access Key ID for authentication
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')   # AWS IAM user's Secret Access Key for authentication
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')

AWS_S3_FILE_OVERWRITE = False  # Prevent overwriting files with the same name in S3

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'  # Use S3 as the default storage backend for media files

MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/' # Public URL for accessing media files stored in S3

